{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iliac\\\\Desktop\\\\ELTE_study\\\\tabletop\\\\tabletop-studio-official\\\\client\\\\src\\\\store\\\\layoutStore.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Define layout types\n\n// Define player names\n\n// Define card structure\n\n// Define the context value type\n\n// Define the props type for the provider component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create context with default value undefined\nconst LayoutContext = /*#__PURE__*/createContext(undefined);\n\n// Define the provider component\nexport const LayoutProvider = ({\n  children\n}) => {\n  _s();\n  const [currentLayout, setCurrentLayout] = useState('layout1');\n  const [playerCards, setPlayerCards] = useState({\n    'Player A': [],\n    'Player B': []\n  });\n\n  // Add a new card to the player's hand\n  const addCard = (player, card) => {\n    setPlayerCards(prev => ({\n      ...prev,\n      [player]: [...prev[player], card]\n    }));\n  };\n\n  // Update card count by delta\n  const updateCard = (player, cardId, delta) => {\n    setPlayerCards(prev => ({\n      ...prev,\n      [player]: prev[player].map(card => card.id === cardId ? {\n        ...card,\n        count: card.count + delta\n      } : card)\n    }));\n  };\n\n  // Delete a card\n  const deleteCard = (player, cardId) => {\n    setPlayerCards(prev => ({\n      ...prev,\n      [player]: prev[player].filter(card => card.id !== cardId)\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(LayoutContext.Provider, {\n    value: {\n      currentLayout,\n      setLayout: setCurrentLayout,\n      playerCards,\n      addCard,\n      updateCard,\n      deleteCard\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the layout context\n_s(LayoutProvider, \"PtZiEAFmO50pi+yHcXYDKE46KqU=\");\n_c = LayoutProvider;\nexport const useLayout = () => {\n  _s2();\n  const context = useContext(LayoutContext);\n  if (!context) {\n    throw new Error('useLayout must be used within a LayoutProvider');\n  }\n  return context;\n};\n_s2(useLayout, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LayoutProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","LayoutContext","undefined","LayoutProvider","children","_s","currentLayout","setCurrentLayout","playerCards","setPlayerCards","addCard","player","card","prev","updateCard","cardId","delta","map","id","count","deleteCard","filter","Provider","value","setLayout","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLayout","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/iliac/Desktop/ELTE_study/tabletop/tabletop-studio-official/client/src/store/layoutStore.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\n// Define layout types\r\ntype LayoutType = 'layout1' | 'layout2';\r\n\r\n// Define player names\r\nexport type PlayerName = 'Player A' | 'Player B';\r\n\r\n// Define card structure\r\nexport interface Card {\r\n  id: number;\r\n  name: string;\r\n  count: number;\r\n}\r\n\r\n// Define the context value type\r\ninterface LayoutContextProps {\r\n  currentLayout: LayoutType;\r\n  setLayout: (layout: LayoutType) => void;\r\n  playerCards: Record<PlayerName, Card[]>;\r\n  addCard: (player: PlayerName, card: Card) => void;\r\n  updateCard: (player: PlayerName, cardId: number, delta: number) => void;\r\n  deleteCard: (player: PlayerName, cardId: number) => void;\r\n}\r\n\r\n// Define the props type for the provider component\r\ninterface LayoutProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Create context with default value undefined\r\nconst LayoutContext = createContext<LayoutContextProps | undefined>(undefined);\r\n\r\n// Define the provider component\r\nexport const LayoutProvider: React.FC<LayoutProviderProps> = ({ children }) => {\r\n  const [currentLayout, setCurrentLayout] = useState<LayoutType>('layout1');\r\n\r\n  const [playerCards, setPlayerCards] = useState<Record<PlayerName, Card[]>>({\r\n    'Player A': [],\r\n    'Player B': [],\r\n  });\r\n\r\n  // Add a new card to the player's hand\r\n  const addCard = (player: PlayerName, card: Card) => {\r\n    setPlayerCards((prev) => ({\r\n      ...prev,\r\n      [player]: [...prev[player], card],\r\n    }));\r\n  };\r\n\r\n  // Update card count by delta\r\n  const updateCard = (player: PlayerName, cardId: number, delta: number) => {\r\n    setPlayerCards((prev) => ({\r\n      ...prev,\r\n      [player]: prev[player].map((card) =>\r\n        card.id === cardId ? { ...card, count: card.count + delta } : card\r\n      ),\r\n    }));\r\n  };\r\n\r\n  // Delete a card\r\n  const deleteCard = (player: PlayerName, cardId: number) => {\r\n    setPlayerCards((prev) => ({\r\n      ...prev,\r\n      [player]: prev[player].filter((card) => card.id !== cardId),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <LayoutContext.Provider\r\n      value={{\r\n        currentLayout,\r\n        setLayout: setCurrentLayout,\r\n        playerCards,\r\n        addCard,\r\n        updateCard,\r\n        deleteCard,\r\n      }}\r\n    >\r\n      {children}\r\n    </LayoutContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the layout context\r\nexport const useLayout = (): LayoutContextProps => {\r\n  const context = useContext(LayoutContext);\r\n  if (!context) {\r\n    throw new Error('useLayout must be used within a LayoutProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;;AAE7E;;AAGA;;AAGA;;AAOA;;AAUA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA;AACA,MAAMC,aAAa,gBAAGL,aAAa,CAAiCM,SAAS,CAAC;;AAE9E;AACA,OAAO,MAAMC,cAA6C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAa,SAAS,CAAC;EAEzE,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAA6B;IACzE,UAAU,EAAE,EAAE;IACd,UAAU,EAAE;EACd,CAAC,CAAC;;EAEF;EACA,MAAMY,OAAO,GAAGA,CAACC,MAAkB,EAAEC,IAAU,KAAK;IAClDH,cAAc,CAAEI,IAAI,KAAM;MACxB,GAAGA,IAAI;MACP,CAACF,MAAM,GAAG,CAAC,GAAGE,IAAI,CAACF,MAAM,CAAC,EAAEC,IAAI;IAClC,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,UAAU,GAAGA,CAACH,MAAkB,EAAEI,MAAc,EAAEC,KAAa,KAAK;IACxEP,cAAc,CAAEI,IAAI,KAAM;MACxB,GAAGA,IAAI;MACP,CAACF,MAAM,GAAGE,IAAI,CAACF,MAAM,CAAC,CAACM,GAAG,CAAEL,IAAI,IAC9BA,IAAI,CAACM,EAAE,KAAKH,MAAM,GAAG;QAAE,GAAGH,IAAI;QAAEO,KAAK,EAAEP,IAAI,CAACO,KAAK,GAAGH;MAAM,CAAC,GAAGJ,IAChE;IACF,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMQ,UAAU,GAAGA,CAACT,MAAkB,EAAEI,MAAc,KAAK;IACzDN,cAAc,CAAEI,IAAI,KAAM;MACxB,GAAGA,IAAI;MACP,CAACF,MAAM,GAAGE,IAAI,CAACF,MAAM,CAAC,CAACU,MAAM,CAAET,IAAI,IAAKA,IAAI,CAACM,EAAE,KAAKH,MAAM;IAC5D,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACEf,OAAA,CAACC,aAAa,CAACqB,QAAQ;IACrBC,KAAK,EAAE;MACLjB,aAAa;MACbkB,SAAS,EAAEjB,gBAAgB;MAC3BC,WAAW;MACXE,OAAO;MACPI,UAAU;MACVM;IACF,CAAE;IAAAhB,QAAA,EAEDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;;AAED;AAAAvB,EAAA,CAlDaF,cAA6C;AAAA0B,EAAA,GAA7C1B,cAA6C;AAmD1D,OAAO,MAAM2B,SAAS,GAAGA,CAAA,KAA0B;EAAAC,GAAA;EACjD,MAAMC,OAAO,GAAGnC,UAAU,CAACI,aAAa,CAAC;EACzC,IAAI,CAAC+B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}